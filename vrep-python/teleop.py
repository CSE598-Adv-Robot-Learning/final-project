import time
import random
import numpy as np
import rospy
from baxter_pykdl import baxter_kinematics
import baxter_interface
import pickle

arr_right = []

NAMES = (['head_nod', 'head_pan', 'left_e0', 'left_e1',
          'left_s0', 'left_s1', 'left_w0', 'left_w1',
          'left_w2', 'right_e0', 'right_e1', 'right_s0',
          'right_s1', 'right_w0', 'right_w1', 'right_w2', 'torso_t0'])

ANGLE_NAMES_R = ['right_s0', 'right_s1', 'right_e0', 'right_e1', 'right_w0', 'right_w1', 'right_w2']
ANGLE_NAMES_L = ['left_s0', 'left_s1', 'left_e0', 'left_e1', 'left_w0', 'left_w1', 'left_w2']

INIT = ([0.0, -0.15569904997036949, -0.36930587468341336, 0.45904375077471005,
         0.38426218736529616, 0.9495341077010712, 2.850136303891099, -0.10699515995500761,
         -2.6004809306627474, 0.44983986604739756, 0.54686415088115, -0.4544418084110538,
         0.9380292517919305, -2.848602323103213, 0.03911651009107805, 2.6196556905113155,
         -12.565987119160338])


class Teleop:
    """ Class for teleoperating robot"""
    def __init__(self):
        self.hugs = []
        self.limb_l = baxter_interface.Limb('left')
        self.limb_r = baxter_interface.Limb('right')
        self.err_max = 0.3

    def clean_key(self, key):
        """returns a cleaned key"""
        pos1l = self.limb_l.joint_angles()
        pos1r = self.limb_r.joint_angles()
        for name in range(len(NAMES)):
            noise = random.uniform(-0.15, 0.15)
            joint = NAMES[name]
            if joint.find("left") == 0:
                pos1l[joint] = key[name] + noise
            if joint.find("right") == 0:
                pos1r[joint] = key[name] + noise
        return [pos1l, pos1r]

    def create_keys(self, keyPoints):
        positions_left = []
        positions_right = []
        for key in keyPoints:
            pos_l, pos_r = self.clean_key(key)
            positions_left.append(pos_l)
            positions_right.append(pos_r)
        return [positions_left, positions_right]

    def create_hug(self, keyPoints):
        """Create hug using key points"""
        hs = self.create_keys(keyPoints)
        self.hugs.append(hs)

    def get_hug(self, index):
        return self.hugs[index]

    def give_hug(self, index):
        """Give Hug at a specific index"""
        pos_l, pos_r = self.get_hug(index)
        for i in range(len(pos_l)):
            init_l = [pos_l[i][x] for x in pos_l[i]]
            init_r = [pos_r[i][x] for x in pos_r[i]]
            while True:
                self.limb_l.set_joint_positions(pos_l[i])
                self.limb_r.set_joint_positions(pos_r[i])
                arr_right.append(pos_r[i])
                mdl = self.limb_l.joint_angles()
                mdr = self.limb_r.joint_angles()
                mdl1 = [mdl[x] for x in mdl]
                mdr1 = [mdr[x] for x in mdr]
                x_l = np.linalg.norm(np.array(mdl1) - np.array(init_l))
                x_r = np.linalg.norm(np.array(mdr1) - np.array(init_r))
                time.sleep(0.2)
                if x_l < self.err_max and x_r < self.err_max:
                    break

    def initial_pos(self):
        """Move the robot to the initial position"""
        p_0 = INIT
        pos0r = self.limb_r.joint_angles()
        pos0l = self.limb_l.joint_angles()
        for name in range(len(NAMES)):
            joint = NAMES[name]
            if joint.find("left") == 0:
                pos0l[joint] = p_0[name]
            if joint.find("right") == 0:
                pos0r[joint] = p_0[name]

        init_l = [pos0l[x] for x in pos0l]
        init_r = [pos0r[x] for x in pos0r]
        while True:
            self.limb_l.set_joint_positions(pos0l)
            self.limb_r.set_joint_positions(pos0r)
            mdl = self.limb_l.joint_angles()
            mdr = self.limb_r.joint_angles()
            mdl1 = [mdl[x] for x in mdl]
            mdr1 = [mdr[x] for x in mdr]
            x_l = np.linalg.norm(np.array(mdl1) - np.array(init_l))
            x_r = np.linalg.norm(np.array(mdr1) - np.array(init_r))
            time.sleep(0.2)
            if x_l < 0.3 and x_r < 0.3:
                break


def main():
    """Main method to initialize hugs"""
    rospy.init_node('baxter_kinematics')

    # Hug 2
    pt1 = [0.0, -0.20938837754635897, -1.0910438353835006, 0.896228275322053, 0.43603403895642884,
           0.03604854851530722, 2.5732527716777818, -0.8298836062460089, -2.6925197779358725,
           1.3522040645209923, 1.0312185846559694, -0.6385195029573034, 0.190980608091734,
           -3.045335359149518, -0.5974855168813686, 2.8953887371337186, -12.565987119160338]

    pt2 = [0.0, -0.21015536794030168, -1.0116603296104303, 0.5622039587600042, -0.3267379078195931,
           0.1062281695610649, 2.848218827906242, -1.0661166475803625, -2.982058651649244,
           1.2873933762328336, 0.8881748761856546, 0.09855826562163783, 0.13767477571271589,
           -3.045335359149518, -0.8406214717612067, 2.9417916559672523, -12.565987119160338]

    pt3 = [0.0, -0.20938837754635897, -1.2647671596115235, 0.9364952710040451, -0.4747670538505356,
           0.27496605622846043, 2.923000391315656, -1.0312185846559694, -2.7458256103148906,
           1.5113545712641039, 1.2743545395358076, 0.1894466273038486, -0.03106311095467963,
           -3.045335359149518, -0.953752554867756, 3.052238272695002, -12.565987119160338]

    pt4 = [0.0, -0.08360195293975504, -1.1807817114747972, 1.2908448330055757, -0.26307770512234846,
           0.17410681942499445, 3.0039178778766114, -1.1393642302018911, -2.561747915768641,
           1.5167235040217029, 1.9220779272204234, -0.12003399665203363, 0.14112623248545805,
           -3.044951863952546, -0.642354454927017, 2.5874420939657217, -12.565987119160338]

    # Hug 3
    h1 = [0.0, -0.11236409271260656, -0.9817477042466648, 1.3702283387786458, 0.5852136705782853, -0.018791264651596317, 2.6652916189509064, -0.5832961945934286, -3.0579907006495723, 0.6925923257302643, 0.83870399577635, -0.6638301859574128, 0.698728248881806, -3.045718854346489, -0.7282573790486002, 2.74851007669369, -12.565987119160338]
    h2 =[0.0, -0.11236409271260656, -1.3886361082332708, 1.3698448435816746, 0.36662140830461387, -0.4559757891989392, 3.0583741958465436, -1.063432181201563, -3.058757691043515, 1.3334127998693959, 0.8183787503368682, -0.10699515995500761, 0.5867476513661708, -2.7975974619060233, -1.3380147422330522, 2.694053758723758, -12.565987119160338]
    h3 = [0.0, -0.11159710231866385, -0.9725438195193523, 0.9936360553527768, -0.39998549044112164, -0.31178159513771037, 3.060675167028372, -1.2601652172478675, -3.058757691043515, 1.4710875755821118, 0.8574952604279463, 0.1836941993492783, 0.6450389213058165, -2.635762488784112, -1.309636097657172, 2.7719032837089426, -12.565987119160338]
    h4 = [0.0, -0.11313108310654926, -0.8241311782914386, 0.6477233876846159, -0.6285486278360483, -0.21360682471304387, 3.0579907006495723, -1.3104030880511146, -3.0484033207252885, 1.556990499703695, 0.9993884833073471, 0.03298058693953639, 0.6649806715483269, -3.0461023495434603, -0.8091748656095558, 2.695587739511643, -12.565987119160338]

    # Hug 5
    h_51 = [0.0, -0.0847524385306691, -0.6216457142905639, 1.1163545183836099,
            0.45674277959288195, 0.43795151494128565, 2.880048929254864,
            -0.42031073588060336, -2.8370974671940727, 1.097946748928985,
            1.3594904732634479, -0.5629709491539469, -0.2274126518040126,
            -3.0407334167858613, -0.6036214400329103, 2.311325552146347, -12.565987119160338]
    h_52 = [0.0, -0.0847524385306691, -1.023165185519571, 0.95490304045867, 0.09280583766706753, 0.38426218736529616, 2.835179991209216, -0.8325680726248084, -2.757330466224031, 1.1102185952320682, 1.2996652225359169, -0.23930100291012454, -0.5276893910325823, -3.0461023495434603, -0.959121487625355, 2.383806144373933, -12.565987119160338]
    h_53 =  [0.0, -0.08513593372764046, -1.3825001850817291, 0.8229806927005244, -0.36662140830461387, 0.4414029717140278, 2.9452431127399943, -1.0074418824437454, -2.6514857918599377, 1.011276834413459, 1.0365875174135684, 0.2584757627586922, -0.35434956200153056, -3.0407334167858613, -1.0921943209744145, 2.980524670861359, -12.565987119160338]
    h_54 = [0.0, -0.08513593372764046, -1.2655341500054664, 1.392087565006013, -0.2051699303796741, 0.2795679985921167, 3.0334470080434057, -0.8440729285339489, -2.8010489186787657, 1.4856603930670231, 1.687378866673955, -0.027228158984966094, -0.03604854851530722, -3.0234761329221507, -0.6250971710633061, 3.046869339937403, -12.565987119160338]
    h_54 = [0.0, -0.0847524385306691, -1.1673593795808, 1.3395487230209375, -0.14687866044002837, 0.3551165523954733, 3.029228560876721, -0.8808884674431988, -2.492335285116826, 1.1504855909140603, 1.7126895496740644, 0.1234854534247758, -0.5215534678810406, -3.0288450656797496, -0.7696748603215063, 2.8781314532700075, -12.565987119160338]

    pos1 = [0.0, -0.3025777104103979, -0.3712233506682701, 0.46096122675956686, 0.381961216183468, 0.9518350788828992, 2.8516702846789843, -0.10891263593986437, -2.6020149114506332, 1.1290098598836644, 0.654242806033129, 0.3746748074410123, 0.2949078064709708, -2.174801262024545, 0.03106311095467963, 3.052238272695002, -12.565987119160338]

    pos2 = [0.0, -0.3025777104103979, -0.37160684586524145, 0.4613447219565382, 0.381961216183468, 0.952602069276842, 2.852820770269898, -0.10891263593986437, -2.6023984066476045, 1.6306215775221948, 0.7014127152606054, 0.39500005288049406, -0.0038349519697135344, -1.7284128527498899, -0.1342233189399737, 3.0533887582859163, -12.565987119160338]

    pos3 = [0.0, -0.3029612056073692, -0.3708398554712988, 0.46096122675956686, 0.38234471138043935, 0.9533690596707847, 2.8524372750729268, -0.10891263593986437, -2.6023984066476045, 2.030990563160288, 0.8367865197914932, 0.46172821715350953, 0.1737233242280231, -2.0819954243574776, -1.0342865462317403, 2.976306223694674, -12.565987119160338]

    position0 = [0.0, -0.3025777104103979, -0.3708398554712988, 0.4563592843959106, 0.3857961681531816, 0.9464661461253003, 2.8516702846789843, -0.10584467436409355, -2.5977964642839484, 0.978679742670894, 0.6599952339876992, 0.17449031462196582, 0.45674277959288195, -2.4539857654196906, -0.07746602978821339, 3.052238272695002, -12.565987119160338]

    position1 = [0.0, -0.3029612056073692, -0.37007286507735604, 0.4571262747898533, 0.3877136441380383, 0.9468496413222717, 2.8520537798759555, -0.10469418877317949, -2.598563454677891, 1.2298690966871304, 0.6507913492603867, 0.3106311095467963, -0.018791264651596317, -2.588209084359664, -0.10316020798529407, 3.0530052630889446, -12.565987119160338]
    position2 = [0.0, -0.3025777104103979, -0.3708398554712988, 0.45674277959288195, 0.3861796633501529, 0.948383622110157, 2.8516702846789843, -0.10507768397015084, -2.5981799594809196, 1.57539826915832, 1.7659953820530825, -0.5744758050630875, 0.3090971287589109, -2.0766264915998787, -1.4147137816273228, 3.0526217678919734, -12.565987119160338]
    position3 = [0.0, -0.3021942152134265, -0.3708398554712988, 0.4571262747898533, 0.3869466537440956, 0.9468496413222717, 2.8520537798759555, -0.10507768397015084, -2.598563454677891, 1.991107062675267, 0.7094661143970039, 0.451373846835283, 0.17985924737956477, -2.0091313369329207, -1.301966193717745, 3.051087787104088, -12.565987119160338]

    hug2 = [pt1, pt2, pt3, pt4]
    hug3 = [h1, h2, h3]
    hug5 = [h_51, h_52, h_53, h_54]

    hi51 = [pos1, pos2, pos3]
    hi52 = [position0, position1, position2, position3]

    teleop = Teleop()
    teleop.create_hug(hi51)
    teleop.create_hug(hi52)
    teleop.initial_pos()
    #teleop.give_hug(1)

    #pickle.dump(arr_right, open("arr_right.pkl", "w"))

if __name__ == "__main__":
    main()
